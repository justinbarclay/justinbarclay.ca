#+TITLE: 1Password Across The Void
#+OPTIONS: ^:nil
#+date: <2023-04-27 Thu>
#+author: Justin Barclay
#+description: 1Password, one set of ssh keys, across many environments
#+section: ./posts
#+weight: 2001
#+auto_set_lastmod: t
#+tags[]: 1Password ssh wsl2
#+hugo_section: ./posts
#+hugo_weight: 2001
#+hugo_auto_set_lastmod: t

#+NAME: An astronaut crossing the void
#+attr_html: :alt "An astronaut crossing the void"
#+attr_html: :style width: 100%
[[/ox-hugo/an-oil-painting-of-the-moon.png]]

@@html:<h2>Using 1Password on Windows from WSL2</h2>@@

Recently, I've grown attached to the philosophy of [[https://nixos.org/][Nix]] and [[https://guix.gnu.org/][Guix]]. I've become so enamoured with declarative system configuration that I've converted my dev environment with Nix and NixOS. This is great because I can easily sync my dev environment setup from my laptop to my desktop or even to a new machine. This process works great except in one spot, signing commits with [[https://gnupg.org/][GPG]].

I define my [[https://git-scm.com/docs/git-config][~.gitconfig~]] file within a Nix Flake, which means that the signing key I use for ~git commit~ is defined in Nix. So I have two machines trying to reference the same GPG key, which I could copy from one machine to the next and manually keep in sync, but that seems like bad form.

I've been using [[https://1password.com/][1Password]] for years, and I have been a mostly[fn:1] happy customer. Recently[fn:2], 1Password released an [[https://blog.1password.com/1password-ssh-agent/][SSH key management system]] where they will generate or import your SSH keys and serve them through a custom SSH Agent. In another blog post, they outlined how this system can be used to [[https://blog.1password.com/git-commit-signing/][sign commits]] with SSH keys.

I love this idea. I get syncable SSH Keys that are protected behind the Biometrics of [[https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello][Windows Hello]].

* Windows 11
Setting up Git to use 1Password for authentication and verification on Windows 11 is simple. You need to:
  1. Add your SSH keys to 1Password
  2. turn on the [[https://developer.1password.com/docs/ssh/get-started/#step-3-turn-on-the-1password-ssh-agent][1Password SSH Agent]]
  3. Tell your Git config about your new signing key and that you're using SSH to sign commits.

Your ~.gitconfig~ should look something like this:

#+begin_src toml
[user]
  signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN1pYfD9AiFZUIKILYVimUjXqEAH7nphmnoeZO3+kd44cC

[gpg]
  format = ssh

[gpg "ssh"]
  program = "C:/Users/justin/AppData/Local/1Password/app/8/op-ssh-sign.exe"

[commit]
  gpgsign = true
#+end_src

Now you can ~git commit~, ~git push~, and ~rm -rf /~ to your heart's content. Well, maybe not that last one. 
* WSL2
However, this setup no longer works once you cross the void and move into WSL2. You have to remember that this WSL2 is a virtual machine, and it has its own copy of SSH.

At the time of this writing, if you scour the web for how to hook up SSH on WSL2 with the 1Password running on Windows, you will find 1 solution. You could set up a [[https://learn.microsoft.com/en-us/windows/win32/ipc/named-pipes][named pipe]] on the Windows side to talk to 1Password's SSH Agent and use [[https://learn.microsoft.com/en-us/windows/win32/ipc/named-pipes][npiperelay]] on WSL to communicate to that named pipe. You can read more about that [[https://learn.microsoft.com/en-us/windows/win32/ipc/named-pipes][here]].

But there is a simpler way. If you've used WSL2 before, then you know that you can [[https://learn.microsoft.com/en-us/windows/wsl/filesystems#run-windows-tools-from-linux][call Windows applications]] from WSL2, so why not use the Windows version of SSH too?

We can validate that we can call the Windows variant of SSH from a WSL2 shell:

#+begin_src bash :results output
ssh.exe -V
#+end_src

It should output something like this:
#+ATTR_HTML: :class not-prose
#+begin_quote
OpenSSH_for_Windows_8.6p1, LibreSSL 3.4.3
#+end_quote

If you don't get a result, that might be because ~ssh.exe~ isn't on your path. Instead, you might need to call it directly. On Windows 11, SSH can be found in System32:

#+begin_src bash :results code
/mnt/c/WINDOWS/System32/OpenSSH//ssh.exe -V
#+end_src

Again we get the same result:
#+ATTR_HTML: :class not-prose
#+begin_quote
OpenSSH_for_Windows_8.6p1, LibreSSL 3.4.3
#+end_quote

If that _still_ doesn't work, you might have turned off [[https://learn.microsoft.com/en-us/windows/wsl/wsl-config#interop-settings][interop]] and you're in gods hands now.

We know we can talk to SSH on Windows, but can we still gain access to 1Password? Well, we can verify that by calling ~ssh-add.exe~:
#+begin_src bash
ssh-add.exe -L

# or /mnt/c/WINDOWS/System32/OpenSSH//ssh-add.exe -L
#+end_src

And it should show you the SSH keys you have stored in 1Password:
@@html:<div class="table-scroll">@@
| ssh-ed25519 | AAAAC3NzaC1lZDI1NTE5AAAAIGFbygxEvFlS66vaugGRlbXR12yjozS8G+yYrK23lmZo | SSH | Signing | Key |
| ssh-ed25519 | AAAAC3NzaC1lZDI1NTE5AAAAIHyfKl/29RIys3r+UsyM6ODnh04tI01iUBeBjornOrnl | SSH | Auth    | Key |
@@html:</div>@@

Now that we have verified that we have access to SSH and 1Password's SSH agent, we have to tell Git about it:
#+begin_src toml
[core]
  sshProgram = "ssh.exe"
#+end_src

Or, if you prefer not to have Windows applications on your path:
#+begin_src toml
[core]
  sshProgram = "/mnt/c/WINDOWS/System32/OpenSSH//ssh.exe"
#+end_src

Enjoy your biometrically protected SSH keys :)
** Bonus: Sign commits with SSH

Getting SSH authentication was only the start for me. What I was really interested in was having SSH keys that can sign my commits. And if you remember from the Windows config, 1Password had its own SSH signing program. 
#+begin_src toml
[gpg "ssh"]
  program = "C:/Users/justin/AppData/Local/1Password/app/8/op-ssh-sign.exe"
#+end_src

Unfortunately, we can't just copy this config as is. Instead, we must translate this from a Windows path to a Unix path. That just requires changing any ~\~ path separators to ~/~ and replace ~C:/~ with ~/mnt/c/~

#+begin_src bash
"/mnt/c/Users/justin/AppData/Local/1Password/app/8/op-ssh-sign.exe"
#+end_src

Alternatively, you can add the 1Password directory to your Windows environment variables. Using Powershell, that would look something like this:
#+begin_src powershell
  [Environment]::SetEnvironmentVariable(
      "Path",
      [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::User) + ";C:\Users\justin\AppData\Local\1Password\app\8",
      [EnvironmentVariableTarget]::User)
#+end_src

Now we put everything together and the final product should look very similar to this:
#+begin_src toml
[core]
  sshProgram = "ssh.exe"
[user]
  signingkey = ssh-ed25519 <your signing key>

[gpg]
  format = ssh

[gpg "ssh"]
  program = "op-ssh-sign.exe"

[commit]
  gpgsign = true  
#+end_src

* Warning
1Password's SSH integration works best for WSL2 using /1Password 8.10.3/. If you go to newer versions, it ends up hiding some authentication prompts from you. If you use Git directly in the terminal, you might be fine, but I use [[https://magit.vc/][Magit]], and the newer versions totally break my process.
* Footnotes
[fn:1] 1Password's Android/Firefox support needs to be improved. It doesn't detect enough website forms as login forms, so I have to log into the 1Password app and copy+paste too many times.
[fn:2] For specific definitions of recent, March 2022 is recent for me.
