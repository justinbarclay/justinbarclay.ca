#+title: Sharpening Your Tool Shed: git-sync

When last I left off with [[./automating-git-sync.org][git-sync]], I had written a minor mode that runs git-sync every time a file is saved.

#+begin_src elisp
  (defun git-sync-after-save ()
   (async-shell-command "git-sync -n -s"))
   
  (define-minor-mode git-sync-mode
    ;; Add minor mode documentation here
    "A minor mode to run git-sync on save."
    :lighter "git-sync"
    :after-hook (if git-sync-mode
                    (setq-local after-save-hook (cons 'git-sync-after-save after-save-hook))
                  (setq-local after-save-hook (remove 'git-sync-after-save after-save-hook))))
#+end_src

However, this minor mode is left with 2 inconveniences:

1. We can only specify where it runs by using ~.dir-locals~
2. An annoying buffer pops up whenever we save
3. I can't count.
4. We rely on bash to run this, which won't work for me when I run in a Windows computing environment

* Creating a Global Minor Mode
I think the first point is the easiest to solve. So, instead of requiring a ~.dir-locals.el~ file to decide when git-sync can run, we can make it a [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Minor-Modes.html#index-define_002dglobalized_002dminor_002dmode][global minor mode]] by using the ~define-globalized-minor-mode~ macro.

#+begin_quote
This defines a global toggle named global-mode, whose meaning is to enable or disable the buffer-local minor mode in all ... buffers. It also executes the body forms. To turn on the minor mode in a buffer, it uses the function turn-on; to turn off the minor mode, it calls mode with âˆ’1 as an argument. 
#+end_quote

Which would look something like:
#+begin_src elisp
  (define-global-minor-mode global-git-sync-mode
    git-sync-mode
    :turn-on (lambda () (git-sync-mode 1)))
#+end_src

I want ~git-sync-mode~ to run in specific files and directories. However, by using this macro, it will run in all files and directories. It's like we're adding to the save hook all over again. So, instead, I have to define a different minor mode and take advantage of the ~:global~ option.

So, instead, we can copy and paste what we already have, rename it, and set ~:global~ to ~' t~.
#+begin_src elisp
  (define-minor-mode git-sync-global-mode
    ;; Add minor mode documentation here
    "A global minor mode to run git-sync."
    :lighter "git-sync"
    :global 't
    :after-hook (if git-sync-mode
                    (setq-local after-save-hook (cons 'git-sync-after-save-hook after-save-hook))
                  (setq-local after-save-hook (remove 'git-sync-after-save-hook after-save-hook))))
#+end_src

Our final step is to create a new hook that looks at a user customized list, [[https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html][~defcustom~]], and only runs git-sync if we're within that directory.

#+begin_src elisp
  (defcustom git-sync-allow-list nil
    "List of directories to sync with git-sync."
    :type '(repeat directory)
    :group 'git-sync
    :safe #' listp)
#+end_src

Then we make a new ~after-save-hook~, ~git-sync-global-after-save~, that will look to see if the current file being saved exists in the directory or is in a subdirectory.

#+begin_src elisp
  (defun git-sync--allowed-directory (current-file allowed-dirs)
    "Return t if CURRENT-FILE is in one of the ALLOWED-SUBDIRS."
    (cl-reduce (lambda (any-p allowed-dir)
                 (or any-p
                     (string-prefix-p allowed-dir current-file)))
               allowed-dirs
               :initial-value nil))

  (defun git-sync-global-after-save ()
    (when (git-sync--allowed-subdirectory (buffer-file-name))
      (async-shell-command "git-sync -n -s" )))
#+end_src

And now we can set that as ~git-sync-global-mode~

#+begin_src elisp
  (define-minor-mode git-sync-global-mode
    ;; Add minor mode documentation here
    "A global minor mode to run git-sync."
    :lighter "git-sync"
    :global 't
    :after-hook (if git-sync-global-mode
                    (setq-local after-save-hook (cons 'git-sync-global-after-save after-save-hook))
                  (setq-local after-save-hook (remove 'git-sync-global-after-save after-save-hook))))
#+end_src

* Making a process instead of a command
~async-shell-command~ is an excellent start for learning how to call programs from within Emacs, but it is a poor system for doing things programmatically. It opens up a buffer beside where you're working, shrinking your workspace in half, and it's not easily closed. Instead, you must use ~C-x k~ to kill the buffer.

We're going to use the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-make_002dprocess][~make-process~]] function to give us finer control over what environment ~git-sync~ is run in. ~make-process~ takes a lot arguments (~name~, ~buffer~, ~command~, ~coding~, ~noquery~, ~stop~, ~connection-type~, ~filter~, ~sentinel~, ~stderr~, ~file-handler~) but we are only concerned about 3:

  - name
    NAME is name for process. It is modified if necessary to make it unique.

  - sentinel
    Install SENTINEL as the process sentinel.

  - buffer
    BUFFER is the buffer (or buffer-name) to associate with the process. Process output goes at end of that buffer, unless you specify a filter function to handle the output. BUFFER may be also nil, meaning that this process is not associated with any buffer.

  - command
     COMMAND is a list starting with the program file name, followed by strings to give to the program as arguments. If the program file name is not an absolute file name, 'make-process' will look for the program file name in 'exec-path' (which is a list of directories).

  The most interesting part, to me, is the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html][process sentinel]]. Their description of the sentinel argument doesn't go into too much detail, so

#+begin_quote
  A process sentinel is a function that is called whenever the associated process changes status for any reason, including signals (whether sent by Emacs or caused by the process's own actions) that terminate, stop, or continue the process.
  ...
  The sentinel receives two arguments: the process for which the event occurred and a string describing the type of event. 
#+end_quote

So, a process sentinel could look like this:
#+begin_src elisp
  (defun sentinel-fn (process event)
    (when (string= event "finished\n")
      (message "Process finished" process event)))
#+end_src

So it's a function that can respond to the changes to a process and its buffer. What we want to do with our sentinel function is to make our process buffer read-only for the user and have the user quit the buffer ([[https://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting-Windows.html#index-quit_002drestore_002dwindow][bury it]]) when they press ~q~.

Luckily, there is a special [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Modes.html][major-mode]] called [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html#index-special_002dmode][special-mode]] that does just that.
#+begin_src elisp
  (defun git-sync--sentinel-fn (process event)
    ;; with-current-buffer that remembers the current buffer while
    ;; executing the body in the buffer of the process
    (with-current-buffer (process-buffer process)
      (special-mode)))
#+end_src

#+begin_quote
 Emacs can only ever operate in one buffer at a time, so I use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Current-Buffer.html#index-with_002dcurrent_002dbuffer][~with-current-buffer~]] as means to remember what the current buffer is, switch to a buffer that I want to operate in, and then return control back to the ~current-buffer~ when I'm done my work.
#+end_quote

Now that a sentinel-fn is defined, I must also create a buffer for Emacs to run the ~git-sync~ process. Using [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffers.html#index-get_002dbuffer_002dcreate][~get-or-create-buffer~]], if my ~*git-sync*~ buffer doesn't exist it will create it, otherwise we reuse the buffer. 

#+begin_src elisp
(get-buffer-create "*git-sync*")
#+end_src

By convention, if a buffer's name is surrounded by asterisks (~*~), that indicates that the buffer is not associated with a file.

With that information, we can make our process:
#+begin_src elisp
  (make-process :name "git-sync"
                :buffer (get-buffer-create "*git-sync*")
                :command '("git-sync" "-n" "-s")
                : sentinel' git-sync--sentinel-fn)
#+end_src

Putting it all together, we can get our full minor-mode
#+begin_src elisp
  (defun git-sync--sentinel-fn (process event)
    (with-current-buffer (process-buffer process)
      (special-mode))) 

  (defun git-sync--execute ()
    (make-process :name "git-sync"
                  :buffer (get-buffer-create "*git-sync*")
                  :command '("git-sync" "-n" "-s")
                  : sentinel' git-sync--sentinel-fn))

  (defun git-sync--allowed-directory (current-file allowed-dirs)
    "Return t if CURRENT-FILE is in one of the ALLOWED-SUBDIRS."
    (cl-reduce (lambda (any-p allowed-dir)
                 (or any-p
                     (string-prefix-p allowed-dir current-file)))
               allowed-dirs
               :initial-value nil))

  (defun git-sync--global-after-save ()
    (when (git-sync--allowed-subdirectory (buffer-file-name))
      (git-sync--execute)))

  (define-minor-mode git-sync-global-mode
    ;; Add minor mode documentation here
    "A global minor mode to run git-sync."
    :lighter "git-sync"
    :global 't
    :after-hook (if git-sync-mode
                    (setq-local after-save-hook (cons 'git-sync-after-save-hook after-save-hook))
                  (setq-local after-save-hook (remove 'git-sync-after-save-hook after-save-hook))))
#+end_src

Stay tuned for next time when we add a little bit of polish before submitting our package to melpa
