<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Justin Barclay</title><link>https://justinbarclay.ca/posts/</link><description>Recent content in Posts on Justin Barclay</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 04 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://justinbarclay.ca/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Sharpening Your Toolshed: Sanding down the rough edges of git-sync</title><link>https://justinbarclay.ca/posts/sanding-down-git-sync/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/sanding-down-git-sync/</guid><description>There are three things that still annoy me with my git-sync mode:
The git-sync process buffer shows ^M rather than a new line There is no way to ignore files in a directory or project git-sync requires a bash shell script to run. Processing the process output When I run git-sync in a buffer, sometimes I get lines that sprinkle ^M everywhere:
#... Counting objects: 20% (1/5)^MCounting objects: 40% (2/5)^MCounting objects: 60% (3/5)^MCounting objects: 80% (4/5)^MCounting objects: 100% (5/5)^MCounting objects: 100% (5/5), done.</description></item><item><title>From Zero To IDE with Emacs and LSP</title><link>https://justinbarclay.ca/posts/from-zero-to-ide-with-emacs-and-lsp/</link><pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/from-zero-to-ide-with-emacs-and-lsp/</guid><description>Emacs 29 has made great strides toward allowing users to craft their own Integrated Development Environment (IDE) using its built-in packages. This transformation didn&amp;#39;t happen overnight; it&amp;#39;s the culmination of Emacs&amp;#39; continuous evolution. The refactor of Flymake, a robust framework for code diagnostics, in Emacs 26 marks the beginning of a new era for Emacs as an IDE. Now, five years and three major versions later, I think the journey has reached a zenith with the built-in support for the Language Server Protocol (LSP) via Eglot.</description></item><item><title>Sharpening Your Toolshed: git-sync with a little polish</title><link>https://justinbarclay.ca/posts/automating-git-sync-part-2/</link><pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/automating-git-sync-part-2/</guid><description>When last I left off with git-sync, I had written a minor mode that runs git-sync every time a file is saved.
(defun git-sync-after-save () (async-shell-command &amp;#34;git-sync -n -s&amp;#34;)) (define-minor-mode git-sync-mode &amp;#34;A minor mode for running git-sync upon saving.&amp;#34; :lighter &amp;#34;git-sync&amp;#34; :after-hook (if git-sync-mode (setq-local after-save-hook (cons &amp;#39;git-sync-after-save after-save-hook)) (setq-local after-save-hook (remove &amp;#39;git-sync-after-save after-save-hook)))) However, this minor mode comes with two inconveniences:
It can only be customized using .dir-locals. An annoying buffer pops up every time a file is saved.</description></item><item><title>Sharpening Your Toolshed: Automating git-sync</title><link>https://justinbarclay.ca/posts/automating-git-sync/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/automating-git-sync/</guid><description>I&amp;#39;ve been trying to write more this year. To help with that, I&amp;#39;ve embraced the idea of diarying. Since I primarily use a computer for writing, I wanted a tool that could foster a more interconnected thinking style. That&amp;#39;s when I stumbled upon org-roam, an extension for org-mode that seamlessly integrates with the Zettelkasten style of note-taking.
I value org-mode for its straightforward syntax, which enables me to write simple notes.</description></item><item><title>Sharpening Your Toolshed</title><link>https://justinbarclay.ca/posts/sharpening-your-toolshed/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/sharpening-your-toolshed/</guid><description>There is a lot of content out there that teaches you how a language or framework works by building a simple toy app. However, I want to see how people use their languages of choice to build things for themselves. I want to see how people sharpen their tools. I want to see how people build things to make their lives easier. And so, I decided to be the change I wanted to see.</description></item><item><title>1Password Across The Void</title><link>https://justinbarclay.ca/posts/1password-across-the-void/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/1password-across-the-void/</guid><description>Using 1Password on Windows from WSL2
Recently, I&amp;#39;ve grown attached to the philosophy of Nix and Guix. I&amp;#39;ve become so enamoured with declarative system configuration that I&amp;#39;ve converted my dev environment with Nix and NixOS. This is great because I can easily sync my dev environment setup from my laptop to my desktop or even to a new machine. This process works great except in one spot, signing commits with GPG.</description></item><item><title>How I sped up demo data generation by 97%</title><link>https://justinbarclay.ca/posts/metaprogramming-in-postgresql/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/metaprogramming-in-postgresql/</guid><description>…or how I chose to copy data instead of generating it TLDR; Move from as much work as possible from Ruby on Rails into SQL
Shocking, I know.
I find it best to play with code to see how it really works. So all the code in this post is meant as a playground. In fact, that was most of the impetus for writing this in general; I wrote it as I explored and tried to understand the SQL functionality.</description></item><item><title>Literate Programming against REST APIs</title><link>https://justinbarclay.ca/posts/literate_programming_against_rest_apis/</link><pubDate>Sat, 02 Feb 2019 00:00:00 -0700</pubDate><guid>https://justinbarclay.ca/posts/literate_programming_against_rest_apis/</guid><description>Rest Call Me Maybe Link to heading TL;DR Other HTTP Clients aren’t that great. Here we use Emacs and restclient, with public APIs, to identify plants and share on Twitter. Emacs and restclient offer a great user experience and workflow when documenting and exploring APIs.
Lately, I&amp;rsquo;ve spent a lot of time exploring web APIs. I&amp;rsquo;ve tried a couple of tools over the years: Postman back when it was a chrome extension, Curl, and HTTPie.</description></item><item><title>Learning to hack Emacs by improving emacs-slack.el</title><link>https://justinbarclay.ca/posts/learning_to_hack_emacs_by_improving_emacs_slack/</link><pubDate>Sat, 24 Mar 2018 00:00:00 -0600</pubDate><guid>https://justinbarclay.ca/posts/learning_to_hack_emacs_by_improving_emacs_slack/</guid><description>Where we left off Link to heading In my previous post I figured out how to send any selected region in Emacs to Slack, wrapped in a markdown style code block (```).
(defun slack-select-rooms () (interactive) (let* ((team (slack-team-select)) (room (slack-room-select (cl-loop for team in (list team) append (with-slots (groups ims channels) team (append ims groups channels)))))) (slack-room-display room team))) Unfortunately, that isn&amp;rsquo;t enough for me! I don&amp;rsquo;t always want to demarcate text as code, sometimes I just want to send naked text.</description></item><item><title>Hacking Emacs to send text to Slack</title><link>https://justinbarclay.ca/posts/learning_to_hack_emacs_by_sending_text_to_slack/</link><pubDate>Sat, 03 Mar 2018 00:00:00 -0700</pubDate><guid>https://justinbarclay.ca/posts/learning_to_hack_emacs_by_sending_text_to_slack/</guid><description>Introduction Link to heading I want to get Emacs to send snippets of text from any buffer to Slack. Luckily, there is a Slack client for Emacs called emacs-slack. So, most of the hard work is done for me &amp;mdash; I have an interface to Slack in Emacs that allows me to send and read messages in any channel, room, or direct message. Unfortunately, I am now at an uncanny valley.</description></item></channel></rss>