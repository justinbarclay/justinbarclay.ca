<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sharpening-your-toolshed on Justin Barclay</title><link>https://justinbarclay.ca/series/sharpening-your-toolshed/</link><description>Recent content in sharpening-your-toolshed on Justin Barclay</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 04 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://justinbarclay.ca/series/sharpening-your-toolshed/index.xml" rel="self" type="application/rss+xml"/><item><title>Sharpening Your Toolshed: Sanding down the rough edges of git-sync</title><link>https://justinbarclay.ca/posts/sanding-down-git-sync/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/sanding-down-git-sync/</guid><description>There are three things that still annoy me with my git-sync mode:
The git-sync process buffer shows ^M rather than a new line There is no way to ignore files in a directory or project git-sync requires a bash shell script to run. Processing the process output When I run git-sync in a buffer, sometimes I get lines that sprinkle ^M everywhere:
#... Counting objects: 20% (1/5)^MCounting objects: 40% (2/5)^MCounting objects: 60% (3/5)^MCounting objects: 80% (4/5)^MCounting objects: 100% (5/5)^MCounting objects: 100% (5/5), done.</description></item><item><title>Sharpening Your Toolshed: git-sync with a little polish</title><link>https://justinbarclay.ca/posts/automating-git-sync-part-2/</link><pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/automating-git-sync-part-2/</guid><description>When last I left off with git-sync, I had written a minor mode that runs git-sync every time a file is saved.
(defun git-sync-after-save () (async-shell-command &amp;#34;git-sync -n -s&amp;#34;)) (define-minor-mode git-sync-mode &amp;#34;A minor mode for running git-sync upon saving.&amp;#34; :lighter &amp;#34;git-sync&amp;#34; :after-hook (if git-sync-mode (setq-local after-save-hook (cons &amp;#39;git-sync-after-save after-save-hook)) (setq-local after-save-hook (remove &amp;#39;git-sync-after-save after-save-hook)))) However, this minor mode comes with two inconveniences:
It can only be customized using .dir-locals. An annoying buffer pops up every time a file is saved.</description></item><item><title>Sharpening Your Toolshed: Automating git-sync</title><link>https://justinbarclay.ca/posts/automating-git-sync/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/automating-git-sync/</guid><description>I&amp;#39;ve been trying to write more this year. To help with that, I&amp;#39;ve embraced the idea of diarying. Since I primarily use a computer for writing, I wanted a tool that could foster a more interconnected thinking style. That&amp;#39;s when I stumbled upon org-roam, an extension for org-mode that seamlessly integrates with the Zettelkasten style of note-taking.
I value org-mode for its straightforward syntax, which enables me to write simple notes.</description></item><item><title>Sharpening Your Toolshed</title><link>https://justinbarclay.ca/posts/sharpening-your-toolshed/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://justinbarclay.ca/posts/sharpening-your-toolshed/</guid><description>There is a lot of content out there that teaches you how a language or framework works by building a simple toy app. However, I want to see how people use their languages of choice to build things for themselves. I want to see how people sharpen their tools. I want to see how people build things to make their lives easier. And so, I decided to be the change I wanted to see.</description></item></channel></rss>